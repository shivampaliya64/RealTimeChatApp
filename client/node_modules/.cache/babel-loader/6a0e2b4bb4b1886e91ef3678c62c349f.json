{"ast":null,"code":"const http = require('http');\n\nconst express = require('express');\n\nconst socketio = require('socket.io');\n\nconst cors = require('cors');\n\nconst {\n  addUser,\n  removeUser,\n  getUser,\n  getUsersInRoom\n} = require('./users');\n\nconst router = require('./router');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketio(server);\napp.use(cors());\napp.use(router);\nio.on('connect', socket => {\n  socket.on('join', ({\n    name,\n    room\n  }, callback) => {\n    const {\n      error,\n      user\n    } = addUser({\n      id: socket.id,\n      name,\n      room\n    });\n    if (error) return callback(error);\n    socket.join(user.room);\n    socket.emit('message', {\n      user: 'admin',\n      text: `${user.name}, welcome to room ${user.room}.`\n    });\n    socket.broadcast.to(user.room).emit('message', {\n      user: 'admin',\n      text: `${user.name} has joined!`\n    });\n    io.to(user.room).emit('roomData', {\n      room: user.room,\n      users: getUsersInRoom(user.room)\n    });\n    callback();\n  });\n  socket.on('sendMessage', (message, callback) => {\n    const user = getUser(socket.id);\n    io.to(user.room).emit('message', {\n      user: user.name,\n      text: message\n    });\n    callback();\n  });\n  socket.on('disconnect', () => {\n    const user = removeUser(socket.id);\n\n    if (user) {\n      io.to(user.room).emit('message', {\n        user: 'Admin',\n        text: `${user.name} has left.`\n      });\n      io.to(user.room).emit('roomData', {\n        room: user.room,\n        users: getUsersInRoom(user.room)\n      });\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/91876/Desktop/RealTimechat-app/client/src/components/Chat/Chat.js"],"names":["http","require","express","socketio","cors","addUser","removeUser","getUser","getUsersInRoom","router","app","server","createServer","io","use","on","socket","name","room","callback","error","user","id","join","emit","text","broadcast","to","users","message"],"mappings":"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","sourcesContent":["const http = require('http');\r\nconst express = require('express');\r\nconst socketio = require('socket.io');\r\nconst cors = require('cors');\r\n\r\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./users');\r\n\r\nconst router = require('./router');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server);\r\n\r\napp.use(cors());\r\napp.use(router);\r\n\r\nio.on('connect', (socket) => {\r\n  socket.on('join', ({ name, room }, callback) => {\r\n    const { error, user } = addUser({ id: socket.id, name, room });\r\n\r\n    if(error) return callback(error);\r\n\r\n    socket.join(user.room);\r\n\r\n    socket.emit('message', { user: 'admin', text: `${user.name}, welcome to room ${user.room}.`});\r\n    socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name} has joined!` });\r\n\r\n    io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('sendMessage', (message, callback) => {\r\n    const user = getUser(socket.id);\r\n\r\n    io.to(user.room).emit('message', { user: user.name, text: message });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    const user = removeUser(socket.id);\r\n\r\n    if(user) {\r\n      io.to(user.room).emit('message', { user: 'Admin', text: `${user.name} has left.` });\r\n      io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room)});\r\n    }\r\n  })\r\n});"]},"metadata":{},"sourceType":"module"}